# -*- coding: utf-8 -*-

import os
import sys
import time
from pandas import DataFrame

#使用方法 同目录创建 webs_xrp_1k 文件夹, 如果需要修改其他币请相应修改

#20190627 注意 获取 20190315后数据 需要把usdt改成usd
#ohlcvs = exchange.fetch_ohlcv('XRP/USDT', '1m', from_timestamp)

#20181001 上一个版本不知道为什么老是被屏蔽,稍微改了下代码 继续观察
#从bitfinex获取 1分钟历史数据,可以追溯到几年以前
#需要翻墙或者 外网,一台机器IP只能同时运行一个程序
# -----------------------------------------------------------------------------

root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.append(root + './')

# -----------------------------------------------------------------------------

import ccxt  # noqa: E402

# -----------------------------------------------------------------------------
# common constants

msec = 1000
minute = 60 * msec
hold = 30

# -----------------------------------------------------------------------------

exchange = ccxt.bitfinex2({
    'rateLimit': 500,
    'enableRateLimit': True,
    # 'verbose': True,
})

# -----------------------------------------------------------------------------

from_datetime = '2017-01-01 00:00:00'
from_timestamp = exchange.parse8601(from_datetime)

# -----------------------------------------------------------------------------

now = exchange.milliseconds()

# -----------------------------------------------------------------------------

data = []



import random
print (random.uniform(3, 10))



while from_timestamp < now:

    try:

        print(exchange.milliseconds(), 'Fetching candles starting from', exchange.iso8601(from_timestamp))
        #ohlcvs = exchange.fetch_ohlcv('XRP/USDT', '1m', from_timestamp)
	ohlcvs = exchange.fetch_ohlcv('XRP/USD', '1m', from_timestamp)
	
	
        print(exchange.milliseconds(), 'Fetched', len(ohlcvs), 'candles')
        first = ohlcvs[0][0]
        last = ohlcvs[-1][0]
        print('First candle epoch', first, exchange.iso8601(first))
        print('Last candle epoch', last, exchange.iso8601(last))

        #from_timestamp += len(ohlcvs) * minute * 1
        # from_timestamp += 60000
        from_timestamp = last+60000*1

        #data += ohlcvs

        #print(ohlcvs)

        df = DataFrame(ohlcvs)

        #print(df)

        savepath = "webs_xrp_1k/xrp_usdt_" + str(first) + "_" + str(last) + ".csv"

        df.to_csv(savepath, index=False, header = False)
		
        print("sleep 10")
        
        time.sleep(random.uniform(2, 4))

        

    #except (ccxt.ExchangeError, ccxt.AuthenticationError, ccxt.ExchangeNotAvailable, ccxt.RequestTimeout) as error:
    
    except:
    

        #print('Got an error', type(error).__name__, error.args, ', retrying in', hold, 'seconds...')
		
        time.sleep(60)
        time.sleep(random.uniform(10, 50))

        
        continue
